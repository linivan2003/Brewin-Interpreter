Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> interfaces funcs
Rule 2     program -> funcs
Rule 3     interfaces -> interfaces interface
Rule 4     interfaces -> interface
Rule 5     interface -> INTERFACE NAME LBRACE fields RBRACE
Rule 6     fields -> fields field
Rule 7     fields -> field
Rule 8     field -> field_function
Rule 9     field -> field_variable
Rule 10    field_function -> NAME LPAREN formal_args RPAREN SEMI
Rule 11    field_function -> NAME LPAREN RPAREN SEMI
Rule 12    field_variable -> NAME SEMI
Rule 13    funcs -> funcs func
Rule 14    funcs -> func
Rule 15    func -> DEF NAME LPAREN formal_args RPAREN LBRACE statements RBRACE
Rule 16    func -> DEF NAME LPAREN RPAREN LBRACE statements RBRACE
Rule 17    formal_args -> formal_args COMMA formal_arg
Rule 18    formal_args -> formal_arg
Rule 19    formal_arg -> NAME
Rule 20    formal_arg -> AMP NAME
Rule 21    statements -> statements statement
Rule 22    statements -> statement
Rule 23    statement -> assign SEMI
Rule 24    assign -> qualified_name ASSIGN expression
Rule 25    statement -> VAR qualified_name_no_dot SEMI
Rule 26    statement -> BVAR qualified_name_no_dot SEMI
Rule 27    qualified_name -> qualified_name DOT NAME
Rule 28    qualified_name -> NAME
Rule 29    qualified_name_no_dot -> NAME
Rule 30    statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE
Rule 31    statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
Rule 32    statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 33    statement -> expression SEMI
Rule 34    statement -> RETURN expression SEMI
Rule 35    statement -> RETURN SEMI
Rule 36    expression -> NOT expression
Rule 37    expression -> MINUS expression
Rule 38    expression -> INT LPAREN expression RPAREN
Rule 39    expression -> STR LPAREN expression RPAREN
Rule 40    expression -> BOOL LPAREN expression RPAREN
Rule 41    expression -> expression EQ expression
Rule 42    expression -> expression GREATER expression
Rule 43    expression -> expression LESS expression
Rule 44    expression -> expression NOT_EQ expression
Rule 45    expression -> expression GREATER_EQ expression
Rule 46    expression -> expression LESS_EQ expression
Rule 47    expression -> expression PLUS expression
Rule 48    expression -> expression MINUS expression
Rule 49    expression -> expression MULTIPLY expression
Rule 50    expression -> expression DIVIDE expression
Rule 51    expression -> LPAREN expression RPAREN
Rule 52    expression -> expression OR expression
Rule 53    expression -> expression AND expression
Rule 54    expression -> NUMBER
Rule 55    expression -> TRUE
Rule 56    expression -> FALSE
Rule 57    expression -> STRING
Rule 58    expression -> CLOSURE NAME
Rule 59    expression -> AT
Rule 60    expression -> NIL
Rule 61    expression -> qualified_name LPAREN args RPAREN
Rule 62    expression -> qualified_name LPAREN RPAREN
Rule 63    expression -> qualified_name
Rule 64    args -> args COMMA expression
Rule 65    args -> expression
Rule 66    expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
Rule 67    expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE

Terminals, with rules where they appear

AMP                  : 20
AND                  : 53
ASSIGN               : 24
AT                   : 59
BOOL                 : 40
BVAR                 : 26
CLOSURE              : 58
COMMA                : 17 64
DEF                  : 15 16
DIVIDE               : 50
DOT                  : 27
ELSE                 : 31
EQ                   : 41
FALSE                : 56
GREATER              : 42
GREATER_EQ           : 45
IF                   : 30 31
INT                  : 38
INTERFACE            : 5
LAMBDA               : 66 67
LBRACE               : 5 15 16 30 31 31 32 66 67
LESS                 : 43
LESS_EQ              : 46
LPAREN               : 10 11 15 16 30 31 32 38 39 40 51 61 62 66 67
MINUS                : 37 48
MULTIPLY             : 49
NAME                 : 5 10 11 12 15 16 19 20 27 28 29 58
NIL                  : 60
NOT                  : 36
NOT_EQ               : 44
NUMBER               : 54
OR                   : 52
PLUS                 : 47
RBRACE               : 5 15 16 30 31 31 32 66 67
RETURN               : 34 35
RPAREN               : 10 11 15 16 30 31 32 38 39 40 51 61 62 66 67
SEMI                 : 10 11 12 23 25 26 33 34 35
STR                  : 39
STRING               : 57
TRUE                 : 55
VAR                  : 25
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

args                 : 61 64
assign               : 23
expression           : 24 30 31 32 33 34 36 37 38 39 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 52 52 53 53 64 65
field                : 6 7
field_function       : 8
field_variable       : 9
fields               : 5 6
formal_arg           : 17 18
formal_args          : 10 15 17 66
func                 : 13 14
funcs                : 1 2 13
interface            : 3 4
interfaces           : 1 3
program              : 0
qualified_name       : 24 27 61 62 63
qualified_name_no_dot : 25 26
statement            : 21 22
statements           : 15 16 21 30 31 31 32 66 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . interfaces funcs
    (2) program -> . funcs
    (3) interfaces -> . interfaces interface
    (4) interfaces -> . interface
    (13) funcs -> . funcs func
    (14) funcs -> . func
    (5) interface -> . INTERFACE NAME LBRACE fields RBRACE
    (15) func -> . DEF NAME LPAREN formal_args RPAREN LBRACE statements RBRACE
    (16) func -> . DEF NAME LPAREN RPAREN LBRACE statements RBRACE

    INTERFACE       shift and go to state 6
    DEF             shift and go to state 7

    program                        shift and go to state 1
    interfaces                     shift and go to state 2
    funcs                          shift and go to state 3
    interface                      shift and go to state 4
    func                           shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> interfaces . funcs
    (3) interfaces -> interfaces . interface
    (13) funcs -> . funcs func
    (14) funcs -> . func
    (5) interface -> . INTERFACE NAME LBRACE fields RBRACE
    (15) func -> . DEF NAME LPAREN formal_args RPAREN LBRACE statements RBRACE
    (16) func -> . DEF NAME LPAREN RPAREN LBRACE statements RBRACE

    INTERFACE       shift and go to state 6
    DEF             shift and go to state 7

    funcs                          shift and go to state 8
    interface                      shift and go to state 9
    func                           shift and go to state 5

state 3

    (2) program -> funcs .
    (13) funcs -> funcs . func
    (15) func -> . DEF NAME LPAREN formal_args RPAREN LBRACE statements RBRACE
    (16) func -> . DEF NAME LPAREN RPAREN LBRACE statements RBRACE

    $end            reduce using rule 2 (program -> funcs .)
    DEF             shift and go to state 7

    func                           shift and go to state 10

state 4

    (4) interfaces -> interface .

    INTERFACE       reduce using rule 4 (interfaces -> interface .)
    DEF             reduce using rule 4 (interfaces -> interface .)


state 5

    (14) funcs -> func .

    DEF             reduce using rule 14 (funcs -> func .)
    $end            reduce using rule 14 (funcs -> func .)


state 6

    (5) interface -> INTERFACE . NAME LBRACE fields RBRACE

    NAME            shift and go to state 11


state 7

    (15) func -> DEF . NAME LPAREN formal_args RPAREN LBRACE statements RBRACE
    (16) func -> DEF . NAME LPAREN RPAREN LBRACE statements RBRACE

    NAME            shift and go to state 12


state 8

    (1) program -> interfaces funcs .
    (13) funcs -> funcs . func
    (15) func -> . DEF NAME LPAREN formal_args RPAREN LBRACE statements RBRACE
    (16) func -> . DEF NAME LPAREN RPAREN LBRACE statements RBRACE

    $end            reduce using rule 1 (program -> interfaces funcs .)
    DEF             shift and go to state 7

    func                           shift and go to state 10

state 9

    (3) interfaces -> interfaces interface .

    INTERFACE       reduce using rule 3 (interfaces -> interfaces interface .)
    DEF             reduce using rule 3 (interfaces -> interfaces interface .)


state 10

    (13) funcs -> funcs func .

    DEF             reduce using rule 13 (funcs -> funcs func .)
    $end            reduce using rule 13 (funcs -> funcs func .)


state 11

    (5) interface -> INTERFACE NAME . LBRACE fields RBRACE

    LBRACE          shift and go to state 13


state 12

    (15) func -> DEF NAME . LPAREN formal_args RPAREN LBRACE statements RBRACE
    (16) func -> DEF NAME . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 14


state 13

    (5) interface -> INTERFACE NAME LBRACE . fields RBRACE
    (6) fields -> . fields field
    (7) fields -> . field
    (8) field -> . field_function
    (9) field -> . field_variable
    (10) field_function -> . NAME LPAREN formal_args RPAREN SEMI
    (11) field_function -> . NAME LPAREN RPAREN SEMI
    (12) field_variable -> . NAME SEMI

    NAME            shift and go to state 15

    fields                         shift and go to state 16
    field                          shift and go to state 17
    field_function                 shift and go to state 18
    field_variable                 shift and go to state 19

state 14

    (15) func -> DEF NAME LPAREN . formal_args RPAREN LBRACE statements RBRACE
    (16) func -> DEF NAME LPAREN . RPAREN LBRACE statements RBRACE
    (17) formal_args -> . formal_args COMMA formal_arg
    (18) formal_args -> . formal_arg
    (19) formal_arg -> . NAME
    (20) formal_arg -> . AMP NAME

    RPAREN          shift and go to state 22
    NAME            shift and go to state 20
    AMP             shift and go to state 24

    formal_args                    shift and go to state 21
    formal_arg                     shift and go to state 23

state 15

    (10) field_function -> NAME . LPAREN formal_args RPAREN SEMI
    (11) field_function -> NAME . LPAREN RPAREN SEMI
    (12) field_variable -> NAME . SEMI

    LPAREN          shift and go to state 25
    SEMI            shift and go to state 26


state 16

    (5) interface -> INTERFACE NAME LBRACE fields . RBRACE
    (6) fields -> fields . field
    (8) field -> . field_function
    (9) field -> . field_variable
    (10) field_function -> . NAME LPAREN formal_args RPAREN SEMI
    (11) field_function -> . NAME LPAREN RPAREN SEMI
    (12) field_variable -> . NAME SEMI

    RBRACE          shift and go to state 27
    NAME            shift and go to state 15

    field                          shift and go to state 28
    field_function                 shift and go to state 18
    field_variable                 shift and go to state 19

state 17

    (7) fields -> field .

    RBRACE          reduce using rule 7 (fields -> field .)
    NAME            reduce using rule 7 (fields -> field .)


state 18

    (8) field -> field_function .

    RBRACE          reduce using rule 8 (field -> field_function .)
    NAME            reduce using rule 8 (field -> field_function .)


state 19

    (9) field -> field_variable .

    RBRACE          reduce using rule 9 (field -> field_variable .)
    NAME            reduce using rule 9 (field -> field_variable .)


state 20

    (19) formal_arg -> NAME .

    RPAREN          reduce using rule 19 (formal_arg -> NAME .)
    COMMA           reduce using rule 19 (formal_arg -> NAME .)


state 21

    (15) func -> DEF NAME LPAREN formal_args . RPAREN LBRACE statements RBRACE
    (17) formal_args -> formal_args . COMMA formal_arg

    RPAREN          shift and go to state 29
    COMMA           shift and go to state 30


state 22

    (16) func -> DEF NAME LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 31


state 23

    (18) formal_args -> formal_arg .

    RPAREN          reduce using rule 18 (formal_args -> formal_arg .)
    COMMA           reduce using rule 18 (formal_args -> formal_arg .)


state 24

    (20) formal_arg -> AMP . NAME

    NAME            shift and go to state 32


state 25

    (10) field_function -> NAME LPAREN . formal_args RPAREN SEMI
    (11) field_function -> NAME LPAREN . RPAREN SEMI
    (17) formal_args -> . formal_args COMMA formal_arg
    (18) formal_args -> . formal_arg
    (19) formal_arg -> . NAME
    (20) formal_arg -> . AMP NAME

    RPAREN          shift and go to state 34
    NAME            shift and go to state 20
    AMP             shift and go to state 24

    formal_args                    shift and go to state 33
    formal_arg                     shift and go to state 23

state 26

    (12) field_variable -> NAME SEMI .

    RBRACE          reduce using rule 12 (field_variable -> NAME SEMI .)
    NAME            reduce using rule 12 (field_variable -> NAME SEMI .)


state 27

    (5) interface -> INTERFACE NAME LBRACE fields RBRACE .

    INTERFACE       reduce using rule 5 (interface -> INTERFACE NAME LBRACE fields RBRACE .)
    DEF             reduce using rule 5 (interface -> INTERFACE NAME LBRACE fields RBRACE .)


state 28

    (6) fields -> fields field .

    RBRACE          reduce using rule 6 (fields -> fields field .)
    NAME            reduce using rule 6 (fields -> fields field .)


state 29

    (15) func -> DEF NAME LPAREN formal_args RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 35


state 30

    (17) formal_args -> formal_args COMMA . formal_arg
    (19) formal_arg -> . NAME
    (20) formal_arg -> . AMP NAME

    NAME            shift and go to state 20
    AMP             shift and go to state 24

    formal_arg                     shift and go to state 36

state 31

    (16) func -> DEF NAME LPAREN RPAREN LBRACE . statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    statements                     shift and go to state 39
    statement                      shift and go to state 40
    assign                         shift and go to state 41
    expression                     shift and go to state 45
    qualified_name                 shift and go to state 48

state 32

    (20) formal_arg -> AMP NAME .

    RPAREN          reduce using rule 20 (formal_arg -> AMP NAME .)
    COMMA           reduce using rule 20 (formal_arg -> AMP NAME .)


state 33

    (10) field_function -> NAME LPAREN formal_args . RPAREN SEMI
    (17) formal_args -> formal_args . COMMA formal_arg

    RPAREN          shift and go to state 62
    COMMA           shift and go to state 30


state 34

    (11) field_function -> NAME LPAREN RPAREN . SEMI

    SEMI            shift and go to state 63


state 35

    (15) func -> DEF NAME LPAREN formal_args RPAREN LBRACE . statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    statements                     shift and go to state 64
    statement                      shift and go to state 40
    assign                         shift and go to state 41
    expression                     shift and go to state 45
    qualified_name                 shift and go to state 48

state 36

    (17) formal_args -> formal_args COMMA formal_arg .

    RPAREN          reduce using rule 17 (formal_args -> formal_args COMMA formal_arg .)
    COMMA           reduce using rule 17 (formal_args -> formal_args COMMA formal_arg .)


state 37

    (28) qualified_name -> NAME .

    ASSIGN          reduce using rule 28 (qualified_name -> NAME .)
    LPAREN          reduce using rule 28 (qualified_name -> NAME .)
    DOT             reduce using rule 28 (qualified_name -> NAME .)
    SEMI            reduce using rule 28 (qualified_name -> NAME .)
    EQ              reduce using rule 28 (qualified_name -> NAME .)
    GREATER         reduce using rule 28 (qualified_name -> NAME .)
    LESS            reduce using rule 28 (qualified_name -> NAME .)
    NOT_EQ          reduce using rule 28 (qualified_name -> NAME .)
    GREATER_EQ      reduce using rule 28 (qualified_name -> NAME .)
    LESS_EQ         reduce using rule 28 (qualified_name -> NAME .)
    PLUS            reduce using rule 28 (qualified_name -> NAME .)
    MINUS           reduce using rule 28 (qualified_name -> NAME .)
    MULTIPLY        reduce using rule 28 (qualified_name -> NAME .)
    DIVIDE          reduce using rule 28 (qualified_name -> NAME .)
    OR              reduce using rule 28 (qualified_name -> NAME .)
    AND             reduce using rule 28 (qualified_name -> NAME .)
    RPAREN          reduce using rule 28 (qualified_name -> NAME .)
    COMMA           reduce using rule 28 (qualified_name -> NAME .)


state 38

    (51) expression -> LPAREN . expression RPAREN
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 65
    qualified_name                 shift and go to state 66

state 39

    (16) func -> DEF NAME LPAREN RPAREN LBRACE statements . RBRACE
    (21) statements -> statements . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    RBRACE          shift and go to state 67
    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    statement                      shift and go to state 68
    assign                         shift and go to state 41
    expression                     shift and go to state 45
    qualified_name                 shift and go to state 48

state 40

    (22) statements -> statement .

    RBRACE          reduce using rule 22 (statements -> statement .)
    VAR             reduce using rule 22 (statements -> statement .)
    BVAR            reduce using rule 22 (statements -> statement .)
    IF              reduce using rule 22 (statements -> statement .)
    WHILE           reduce using rule 22 (statements -> statement .)
    RETURN          reduce using rule 22 (statements -> statement .)
    NOT             reduce using rule 22 (statements -> statement .)
    MINUS           reduce using rule 22 (statements -> statement .)
    INT             reduce using rule 22 (statements -> statement .)
    STR             reduce using rule 22 (statements -> statement .)
    BOOL            reduce using rule 22 (statements -> statement .)
    LPAREN          reduce using rule 22 (statements -> statement .)
    NUMBER          reduce using rule 22 (statements -> statement .)
    TRUE            reduce using rule 22 (statements -> statement .)
    FALSE           reduce using rule 22 (statements -> statement .)
    STRING          reduce using rule 22 (statements -> statement .)
    CLOSURE         reduce using rule 22 (statements -> statement .)
    AT              reduce using rule 22 (statements -> statement .)
    NIL             reduce using rule 22 (statements -> statement .)
    LAMBDA          reduce using rule 22 (statements -> statement .)
    NAME            reduce using rule 22 (statements -> statement .)


state 41

    (23) statement -> assign . SEMI

    SEMI            shift and go to state 69


state 42

    (25) statement -> VAR . qualified_name_no_dot SEMI
    (29) qualified_name_no_dot -> . NAME

    NAME            shift and go to state 71

    qualified_name_no_dot          shift and go to state 70

state 43

    (26) statement -> BVAR . qualified_name_no_dot SEMI
    (29) qualified_name_no_dot -> . NAME

    NAME            shift and go to state 71

    qualified_name_no_dot          shift and go to state 72

state 44

    (30) statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> IF . LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LPAREN          shift and go to state 73


state 45

    (33) statement -> expression . SEMI
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            shift and go to state 74
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 46

    (32) statement -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 87


state 47

    (34) statement -> RETURN . expression SEMI
    (35) statement -> RETURN . SEMI
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    SEMI            shift and go to state 89
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 88
    qualified_name                 shift and go to state 66

state 48

    (24) assign -> qualified_name . ASSIGN expression
    (61) expression -> qualified_name . LPAREN args RPAREN
    (62) expression -> qualified_name . LPAREN RPAREN
    (63) expression -> qualified_name .
    (27) qualified_name -> qualified_name . DOT NAME

    ASSIGN          shift and go to state 90
    LPAREN          shift and go to state 91
    SEMI            reduce using rule 63 (expression -> qualified_name .)
    EQ              reduce using rule 63 (expression -> qualified_name .)
    GREATER         reduce using rule 63 (expression -> qualified_name .)
    LESS            reduce using rule 63 (expression -> qualified_name .)
    NOT_EQ          reduce using rule 63 (expression -> qualified_name .)
    GREATER_EQ      reduce using rule 63 (expression -> qualified_name .)
    LESS_EQ         reduce using rule 63 (expression -> qualified_name .)
    PLUS            reduce using rule 63 (expression -> qualified_name .)
    MINUS           reduce using rule 63 (expression -> qualified_name .)
    MULTIPLY        reduce using rule 63 (expression -> qualified_name .)
    DIVIDE          reduce using rule 63 (expression -> qualified_name .)
    OR              reduce using rule 63 (expression -> qualified_name .)
    AND             reduce using rule 63 (expression -> qualified_name .)
    DOT             shift and go to state 92


state 49

    (36) expression -> NOT . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 93
    qualified_name                 shift and go to state 66

state 50

    (37) expression -> MINUS . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 94
    qualified_name                 shift and go to state 66

state 51

    (38) expression -> INT . LPAREN expression RPAREN

    LPAREN          shift and go to state 95


state 52

    (39) expression -> STR . LPAREN expression RPAREN

    LPAREN          shift and go to state 96


state 53

    (40) expression -> BOOL . LPAREN expression RPAREN

    LPAREN          shift and go to state 97


state 54

    (54) expression -> NUMBER .

    SEMI            reduce using rule 54 (expression -> NUMBER .)
    EQ              reduce using rule 54 (expression -> NUMBER .)
    GREATER         reduce using rule 54 (expression -> NUMBER .)
    LESS            reduce using rule 54 (expression -> NUMBER .)
    NOT_EQ          reduce using rule 54 (expression -> NUMBER .)
    GREATER_EQ      reduce using rule 54 (expression -> NUMBER .)
    LESS_EQ         reduce using rule 54 (expression -> NUMBER .)
    PLUS            reduce using rule 54 (expression -> NUMBER .)
    MINUS           reduce using rule 54 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 54 (expression -> NUMBER .)
    DIVIDE          reduce using rule 54 (expression -> NUMBER .)
    OR              reduce using rule 54 (expression -> NUMBER .)
    AND             reduce using rule 54 (expression -> NUMBER .)
    RPAREN          reduce using rule 54 (expression -> NUMBER .)
    COMMA           reduce using rule 54 (expression -> NUMBER .)


state 55

    (55) expression -> TRUE .

    SEMI            reduce using rule 55 (expression -> TRUE .)
    EQ              reduce using rule 55 (expression -> TRUE .)
    GREATER         reduce using rule 55 (expression -> TRUE .)
    LESS            reduce using rule 55 (expression -> TRUE .)
    NOT_EQ          reduce using rule 55 (expression -> TRUE .)
    GREATER_EQ      reduce using rule 55 (expression -> TRUE .)
    LESS_EQ         reduce using rule 55 (expression -> TRUE .)
    PLUS            reduce using rule 55 (expression -> TRUE .)
    MINUS           reduce using rule 55 (expression -> TRUE .)
    MULTIPLY        reduce using rule 55 (expression -> TRUE .)
    DIVIDE          reduce using rule 55 (expression -> TRUE .)
    OR              reduce using rule 55 (expression -> TRUE .)
    AND             reduce using rule 55 (expression -> TRUE .)
    RPAREN          reduce using rule 55 (expression -> TRUE .)
    COMMA           reduce using rule 55 (expression -> TRUE .)


state 56

    (56) expression -> FALSE .

    SEMI            reduce using rule 56 (expression -> FALSE .)
    EQ              reduce using rule 56 (expression -> FALSE .)
    GREATER         reduce using rule 56 (expression -> FALSE .)
    LESS            reduce using rule 56 (expression -> FALSE .)
    NOT_EQ          reduce using rule 56 (expression -> FALSE .)
    GREATER_EQ      reduce using rule 56 (expression -> FALSE .)
    LESS_EQ         reduce using rule 56 (expression -> FALSE .)
    PLUS            reduce using rule 56 (expression -> FALSE .)
    MINUS           reduce using rule 56 (expression -> FALSE .)
    MULTIPLY        reduce using rule 56 (expression -> FALSE .)
    DIVIDE          reduce using rule 56 (expression -> FALSE .)
    OR              reduce using rule 56 (expression -> FALSE .)
    AND             reduce using rule 56 (expression -> FALSE .)
    RPAREN          reduce using rule 56 (expression -> FALSE .)
    COMMA           reduce using rule 56 (expression -> FALSE .)


state 57

    (57) expression -> STRING .

    SEMI            reduce using rule 57 (expression -> STRING .)
    EQ              reduce using rule 57 (expression -> STRING .)
    GREATER         reduce using rule 57 (expression -> STRING .)
    LESS            reduce using rule 57 (expression -> STRING .)
    NOT_EQ          reduce using rule 57 (expression -> STRING .)
    GREATER_EQ      reduce using rule 57 (expression -> STRING .)
    LESS_EQ         reduce using rule 57 (expression -> STRING .)
    PLUS            reduce using rule 57 (expression -> STRING .)
    MINUS           reduce using rule 57 (expression -> STRING .)
    MULTIPLY        reduce using rule 57 (expression -> STRING .)
    DIVIDE          reduce using rule 57 (expression -> STRING .)
    OR              reduce using rule 57 (expression -> STRING .)
    AND             reduce using rule 57 (expression -> STRING .)
    RPAREN          reduce using rule 57 (expression -> STRING .)
    COMMA           reduce using rule 57 (expression -> STRING .)


state 58

    (58) expression -> CLOSURE . NAME

    NAME            shift and go to state 98


state 59

    (59) expression -> AT .

    SEMI            reduce using rule 59 (expression -> AT .)
    EQ              reduce using rule 59 (expression -> AT .)
    GREATER         reduce using rule 59 (expression -> AT .)
    LESS            reduce using rule 59 (expression -> AT .)
    NOT_EQ          reduce using rule 59 (expression -> AT .)
    GREATER_EQ      reduce using rule 59 (expression -> AT .)
    LESS_EQ         reduce using rule 59 (expression -> AT .)
    PLUS            reduce using rule 59 (expression -> AT .)
    MINUS           reduce using rule 59 (expression -> AT .)
    MULTIPLY        reduce using rule 59 (expression -> AT .)
    DIVIDE          reduce using rule 59 (expression -> AT .)
    OR              reduce using rule 59 (expression -> AT .)
    AND             reduce using rule 59 (expression -> AT .)
    RPAREN          reduce using rule 59 (expression -> AT .)
    COMMA           reduce using rule 59 (expression -> AT .)


state 60

    (60) expression -> NIL .

    SEMI            reduce using rule 60 (expression -> NIL .)
    EQ              reduce using rule 60 (expression -> NIL .)
    GREATER         reduce using rule 60 (expression -> NIL .)
    LESS            reduce using rule 60 (expression -> NIL .)
    NOT_EQ          reduce using rule 60 (expression -> NIL .)
    GREATER_EQ      reduce using rule 60 (expression -> NIL .)
    LESS_EQ         reduce using rule 60 (expression -> NIL .)
    PLUS            reduce using rule 60 (expression -> NIL .)
    MINUS           reduce using rule 60 (expression -> NIL .)
    MULTIPLY        reduce using rule 60 (expression -> NIL .)
    DIVIDE          reduce using rule 60 (expression -> NIL .)
    OR              reduce using rule 60 (expression -> NIL .)
    AND             reduce using rule 60 (expression -> NIL .)
    RPAREN          reduce using rule 60 (expression -> NIL .)
    COMMA           reduce using rule 60 (expression -> NIL .)


state 61

    (66) expression -> LAMBDA . LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> LAMBDA . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 99


state 62

    (10) field_function -> NAME LPAREN formal_args RPAREN . SEMI

    SEMI            shift and go to state 100


state 63

    (11) field_function -> NAME LPAREN RPAREN SEMI .

    RBRACE          reduce using rule 11 (field_function -> NAME LPAREN RPAREN SEMI .)
    NAME            reduce using rule 11 (field_function -> NAME LPAREN RPAREN SEMI .)


state 64

    (15) func -> DEF NAME LPAREN formal_args RPAREN LBRACE statements . RBRACE
    (21) statements -> statements . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    RBRACE          shift and go to state 101
    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    statement                      shift and go to state 68
    assign                         shift and go to state 41
    expression                     shift and go to state 45
    qualified_name                 shift and go to state 48

state 65

    (51) expression -> LPAREN expression . RPAREN
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    RPAREN          shift and go to state 102
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 66

    (61) expression -> qualified_name . LPAREN args RPAREN
    (62) expression -> qualified_name . LPAREN RPAREN
    (63) expression -> qualified_name .
    (27) qualified_name -> qualified_name . DOT NAME

    LPAREN          shift and go to state 91
    RPAREN          reduce using rule 63 (expression -> qualified_name .)
    EQ              reduce using rule 63 (expression -> qualified_name .)
    GREATER         reduce using rule 63 (expression -> qualified_name .)
    LESS            reduce using rule 63 (expression -> qualified_name .)
    NOT_EQ          reduce using rule 63 (expression -> qualified_name .)
    GREATER_EQ      reduce using rule 63 (expression -> qualified_name .)
    LESS_EQ         reduce using rule 63 (expression -> qualified_name .)
    PLUS            reduce using rule 63 (expression -> qualified_name .)
    MINUS           reduce using rule 63 (expression -> qualified_name .)
    MULTIPLY        reduce using rule 63 (expression -> qualified_name .)
    DIVIDE          reduce using rule 63 (expression -> qualified_name .)
    OR              reduce using rule 63 (expression -> qualified_name .)
    AND             reduce using rule 63 (expression -> qualified_name .)
    SEMI            reduce using rule 63 (expression -> qualified_name .)
    COMMA           reduce using rule 63 (expression -> qualified_name .)
    DOT             shift and go to state 92


state 67

    (16) func -> DEF NAME LPAREN RPAREN LBRACE statements RBRACE .

    DEF             reduce using rule 16 (func -> DEF NAME LPAREN RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 16 (func -> DEF NAME LPAREN RPAREN LBRACE statements RBRACE .)


state 68

    (21) statements -> statements statement .

    RBRACE          reduce using rule 21 (statements -> statements statement .)
    VAR             reduce using rule 21 (statements -> statements statement .)
    BVAR            reduce using rule 21 (statements -> statements statement .)
    IF              reduce using rule 21 (statements -> statements statement .)
    WHILE           reduce using rule 21 (statements -> statements statement .)
    RETURN          reduce using rule 21 (statements -> statements statement .)
    NOT             reduce using rule 21 (statements -> statements statement .)
    MINUS           reduce using rule 21 (statements -> statements statement .)
    INT             reduce using rule 21 (statements -> statements statement .)
    STR             reduce using rule 21 (statements -> statements statement .)
    BOOL            reduce using rule 21 (statements -> statements statement .)
    LPAREN          reduce using rule 21 (statements -> statements statement .)
    NUMBER          reduce using rule 21 (statements -> statements statement .)
    TRUE            reduce using rule 21 (statements -> statements statement .)
    FALSE           reduce using rule 21 (statements -> statements statement .)
    STRING          reduce using rule 21 (statements -> statements statement .)
    CLOSURE         reduce using rule 21 (statements -> statements statement .)
    AT              reduce using rule 21 (statements -> statements statement .)
    NIL             reduce using rule 21 (statements -> statements statement .)
    LAMBDA          reduce using rule 21 (statements -> statements statement .)
    NAME            reduce using rule 21 (statements -> statements statement .)


state 69

    (23) statement -> assign SEMI .

    RBRACE          reduce using rule 23 (statement -> assign SEMI .)
    VAR             reduce using rule 23 (statement -> assign SEMI .)
    BVAR            reduce using rule 23 (statement -> assign SEMI .)
    IF              reduce using rule 23 (statement -> assign SEMI .)
    WHILE           reduce using rule 23 (statement -> assign SEMI .)
    RETURN          reduce using rule 23 (statement -> assign SEMI .)
    NOT             reduce using rule 23 (statement -> assign SEMI .)
    MINUS           reduce using rule 23 (statement -> assign SEMI .)
    INT             reduce using rule 23 (statement -> assign SEMI .)
    STR             reduce using rule 23 (statement -> assign SEMI .)
    BOOL            reduce using rule 23 (statement -> assign SEMI .)
    LPAREN          reduce using rule 23 (statement -> assign SEMI .)
    NUMBER          reduce using rule 23 (statement -> assign SEMI .)
    TRUE            reduce using rule 23 (statement -> assign SEMI .)
    FALSE           reduce using rule 23 (statement -> assign SEMI .)
    STRING          reduce using rule 23 (statement -> assign SEMI .)
    CLOSURE         reduce using rule 23 (statement -> assign SEMI .)
    AT              reduce using rule 23 (statement -> assign SEMI .)
    NIL             reduce using rule 23 (statement -> assign SEMI .)
    LAMBDA          reduce using rule 23 (statement -> assign SEMI .)
    NAME            reduce using rule 23 (statement -> assign SEMI .)


state 70

    (25) statement -> VAR qualified_name_no_dot . SEMI

    SEMI            shift and go to state 103


state 71

    (29) qualified_name_no_dot -> NAME .

    SEMI            reduce using rule 29 (qualified_name_no_dot -> NAME .)


state 72

    (26) statement -> BVAR qualified_name_no_dot . SEMI

    SEMI            shift and go to state 104


state 73

    (30) statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE
    (31) statement -> IF LPAREN . expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 105
    qualified_name                 shift and go to state 66

state 74

    (33) statement -> expression SEMI .

    RBRACE          reduce using rule 33 (statement -> expression SEMI .)
    VAR             reduce using rule 33 (statement -> expression SEMI .)
    BVAR            reduce using rule 33 (statement -> expression SEMI .)
    IF              reduce using rule 33 (statement -> expression SEMI .)
    WHILE           reduce using rule 33 (statement -> expression SEMI .)
    RETURN          reduce using rule 33 (statement -> expression SEMI .)
    NOT             reduce using rule 33 (statement -> expression SEMI .)
    MINUS           reduce using rule 33 (statement -> expression SEMI .)
    INT             reduce using rule 33 (statement -> expression SEMI .)
    STR             reduce using rule 33 (statement -> expression SEMI .)
    BOOL            reduce using rule 33 (statement -> expression SEMI .)
    LPAREN          reduce using rule 33 (statement -> expression SEMI .)
    NUMBER          reduce using rule 33 (statement -> expression SEMI .)
    TRUE            reduce using rule 33 (statement -> expression SEMI .)
    FALSE           reduce using rule 33 (statement -> expression SEMI .)
    STRING          reduce using rule 33 (statement -> expression SEMI .)
    CLOSURE         reduce using rule 33 (statement -> expression SEMI .)
    AT              reduce using rule 33 (statement -> expression SEMI .)
    NIL             reduce using rule 33 (statement -> expression SEMI .)
    LAMBDA          reduce using rule 33 (statement -> expression SEMI .)
    NAME            reduce using rule 33 (statement -> expression SEMI .)


state 75

    (41) expression -> expression EQ . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 106
    qualified_name                 shift and go to state 66

state 76

    (42) expression -> expression GREATER . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 107
    qualified_name                 shift and go to state 66

state 77

    (43) expression -> expression LESS . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 108
    qualified_name                 shift and go to state 66

state 78

    (44) expression -> expression NOT_EQ . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 109
    qualified_name                 shift and go to state 66

state 79

    (45) expression -> expression GREATER_EQ . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 110
    qualified_name                 shift and go to state 66

state 80

    (46) expression -> expression LESS_EQ . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 111
    qualified_name                 shift and go to state 66

state 81

    (47) expression -> expression PLUS . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 112
    qualified_name                 shift and go to state 66

state 82

    (48) expression -> expression MINUS . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 113
    qualified_name                 shift and go to state 66

state 83

    (49) expression -> expression MULTIPLY . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 114
    qualified_name                 shift and go to state 66

state 84

    (50) expression -> expression DIVIDE . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 115
    qualified_name                 shift and go to state 66

state 85

    (52) expression -> expression OR . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 116
    qualified_name                 shift and go to state 66

state 86

    (53) expression -> expression AND . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 117
    qualified_name                 shift and go to state 66

state 87

    (32) statement -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 118
    qualified_name                 shift and go to state 66

state 88

    (34) statement -> RETURN expression . SEMI
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            shift and go to state 119
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 89

    (35) statement -> RETURN SEMI .

    RBRACE          reduce using rule 35 (statement -> RETURN SEMI .)
    VAR             reduce using rule 35 (statement -> RETURN SEMI .)
    BVAR            reduce using rule 35 (statement -> RETURN SEMI .)
    IF              reduce using rule 35 (statement -> RETURN SEMI .)
    WHILE           reduce using rule 35 (statement -> RETURN SEMI .)
    RETURN          reduce using rule 35 (statement -> RETURN SEMI .)
    NOT             reduce using rule 35 (statement -> RETURN SEMI .)
    MINUS           reduce using rule 35 (statement -> RETURN SEMI .)
    INT             reduce using rule 35 (statement -> RETURN SEMI .)
    STR             reduce using rule 35 (statement -> RETURN SEMI .)
    BOOL            reduce using rule 35 (statement -> RETURN SEMI .)
    LPAREN          reduce using rule 35 (statement -> RETURN SEMI .)
    NUMBER          reduce using rule 35 (statement -> RETURN SEMI .)
    TRUE            reduce using rule 35 (statement -> RETURN SEMI .)
    FALSE           reduce using rule 35 (statement -> RETURN SEMI .)
    STRING          reduce using rule 35 (statement -> RETURN SEMI .)
    CLOSURE         reduce using rule 35 (statement -> RETURN SEMI .)
    AT              reduce using rule 35 (statement -> RETURN SEMI .)
    NIL             reduce using rule 35 (statement -> RETURN SEMI .)
    LAMBDA          reduce using rule 35 (statement -> RETURN SEMI .)
    NAME            reduce using rule 35 (statement -> RETURN SEMI .)


state 90

    (24) assign -> qualified_name ASSIGN . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    qualified_name                 shift and go to state 66
    expression                     shift and go to state 120

state 91

    (61) expression -> qualified_name LPAREN . args RPAREN
    (62) expression -> qualified_name LPAREN . RPAREN
    (64) args -> . args COMMA expression
    (65) args -> . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    RPAREN          shift and go to state 122
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    qualified_name                 shift and go to state 66
    args                           shift and go to state 121
    expression                     shift and go to state 123

state 92

    (27) qualified_name -> qualified_name DOT . NAME

    NAME            shift and go to state 124


state 93

    (36) expression -> NOT expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 36 (expression -> NOT expression .)
    EQ              reduce using rule 36 (expression -> NOT expression .)
    GREATER         reduce using rule 36 (expression -> NOT expression .)
    LESS            reduce using rule 36 (expression -> NOT expression .)
    NOT_EQ          reduce using rule 36 (expression -> NOT expression .)
    GREATER_EQ      reduce using rule 36 (expression -> NOT expression .)
    LESS_EQ         reduce using rule 36 (expression -> NOT expression .)
    PLUS            reduce using rule 36 (expression -> NOT expression .)
    MINUS           reduce using rule 36 (expression -> NOT expression .)
    MULTIPLY        reduce using rule 36 (expression -> NOT expression .)
    DIVIDE          reduce using rule 36 (expression -> NOT expression .)
    OR              reduce using rule 36 (expression -> NOT expression .)
    AND             reduce using rule 36 (expression -> NOT expression .)
    RPAREN          reduce using rule 36 (expression -> NOT expression .)
    COMMA           reduce using rule 36 (expression -> NOT expression .)

  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 94

    (37) expression -> MINUS expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 37 (expression -> MINUS expression .)
    EQ              reduce using rule 37 (expression -> MINUS expression .)
    GREATER         reduce using rule 37 (expression -> MINUS expression .)
    LESS            reduce using rule 37 (expression -> MINUS expression .)
    NOT_EQ          reduce using rule 37 (expression -> MINUS expression .)
    GREATER_EQ      reduce using rule 37 (expression -> MINUS expression .)
    LESS_EQ         reduce using rule 37 (expression -> MINUS expression .)
    PLUS            reduce using rule 37 (expression -> MINUS expression .)
    MINUS           reduce using rule 37 (expression -> MINUS expression .)
    MULTIPLY        reduce using rule 37 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 37 (expression -> MINUS expression .)
    OR              reduce using rule 37 (expression -> MINUS expression .)
    AND             reduce using rule 37 (expression -> MINUS expression .)
    RPAREN          reduce using rule 37 (expression -> MINUS expression .)
    COMMA           reduce using rule 37 (expression -> MINUS expression .)

  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 95

    (38) expression -> INT LPAREN . expression RPAREN
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 125
    qualified_name                 shift and go to state 66

state 96

    (39) expression -> STR LPAREN . expression RPAREN
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 126
    qualified_name                 shift and go to state 66

state 97

    (40) expression -> BOOL LPAREN . expression RPAREN
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 127
    qualified_name                 shift and go to state 66

state 98

    (58) expression -> CLOSURE NAME .

    SEMI            reduce using rule 58 (expression -> CLOSURE NAME .)
    EQ              reduce using rule 58 (expression -> CLOSURE NAME .)
    GREATER         reduce using rule 58 (expression -> CLOSURE NAME .)
    LESS            reduce using rule 58 (expression -> CLOSURE NAME .)
    NOT_EQ          reduce using rule 58 (expression -> CLOSURE NAME .)
    GREATER_EQ      reduce using rule 58 (expression -> CLOSURE NAME .)
    LESS_EQ         reduce using rule 58 (expression -> CLOSURE NAME .)
    PLUS            reduce using rule 58 (expression -> CLOSURE NAME .)
    MINUS           reduce using rule 58 (expression -> CLOSURE NAME .)
    MULTIPLY        reduce using rule 58 (expression -> CLOSURE NAME .)
    DIVIDE          reduce using rule 58 (expression -> CLOSURE NAME .)
    OR              reduce using rule 58 (expression -> CLOSURE NAME .)
    AND             reduce using rule 58 (expression -> CLOSURE NAME .)
    RPAREN          reduce using rule 58 (expression -> CLOSURE NAME .)
    COMMA           reduce using rule 58 (expression -> CLOSURE NAME .)


state 99

    (66) expression -> LAMBDA LPAREN . formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> LAMBDA LPAREN . RPAREN LBRACE statements RBRACE
    (17) formal_args -> . formal_args COMMA formal_arg
    (18) formal_args -> . formal_arg
    (19) formal_arg -> . NAME
    (20) formal_arg -> . AMP NAME

    RPAREN          shift and go to state 129
    NAME            shift and go to state 20
    AMP             shift and go to state 24

    formal_args                    shift and go to state 128
    formal_arg                     shift and go to state 23

state 100

    (10) field_function -> NAME LPAREN formal_args RPAREN SEMI .

    RBRACE          reduce using rule 10 (field_function -> NAME LPAREN formal_args RPAREN SEMI .)
    NAME            reduce using rule 10 (field_function -> NAME LPAREN formal_args RPAREN SEMI .)


state 101

    (15) func -> DEF NAME LPAREN formal_args RPAREN LBRACE statements RBRACE .

    DEF             reduce using rule 15 (func -> DEF NAME LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    $end            reduce using rule 15 (func -> DEF NAME LPAREN formal_args RPAREN LBRACE statements RBRACE .)


state 102

    (51) expression -> LPAREN expression RPAREN .

    SEMI            reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 51 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 51 (expression -> LPAREN expression RPAREN .)


state 103

    (25) statement -> VAR qualified_name_no_dot SEMI .

    RBRACE          reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    VAR             reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    BVAR            reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    IF              reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    WHILE           reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    RETURN          reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    NOT             reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    MINUS           reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    INT             reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    STR             reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    BOOL            reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    LPAREN          reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    NUMBER          reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    TRUE            reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    FALSE           reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    STRING          reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    CLOSURE         reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    AT              reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    NIL             reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    LAMBDA          reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)
    NAME            reduce using rule 25 (statement -> VAR qualified_name_no_dot SEMI .)


state 104

    (26) statement -> BVAR qualified_name_no_dot SEMI .

    RBRACE          reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    VAR             reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    BVAR            reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    IF              reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    WHILE           reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    RETURN          reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    NOT             reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    MINUS           reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    INT             reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    STR             reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    BOOL            reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    LPAREN          reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    NUMBER          reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    TRUE            reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    FALSE           reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    STRING          reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    CLOSURE         reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    AT              reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    NIL             reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    LAMBDA          reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)
    NAME            reduce using rule 26 (statement -> BVAR qualified_name_no_dot SEMI .)


state 105

    (30) statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE
    (31) statement -> IF LPAREN expression . RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    RPAREN          shift and go to state 130
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 106

    (41) expression -> expression EQ expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 41 (expression -> expression EQ expression .)
    EQ              reduce using rule 41 (expression -> expression EQ expression .)
    GREATER         reduce using rule 41 (expression -> expression EQ expression .)
    LESS            reduce using rule 41 (expression -> expression EQ expression .)
    NOT_EQ          reduce using rule 41 (expression -> expression EQ expression .)
    GREATER_EQ      reduce using rule 41 (expression -> expression EQ expression .)
    LESS_EQ         reduce using rule 41 (expression -> expression EQ expression .)
    OR              reduce using rule 41 (expression -> expression EQ expression .)
    AND             reduce using rule 41 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 41 (expression -> expression EQ expression .)
    COMMA           reduce using rule 41 (expression -> expression EQ expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! MULTIPLY        [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 107

    (42) expression -> expression GREATER expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 42 (expression -> expression GREATER expression .)
    EQ              reduce using rule 42 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 42 (expression -> expression GREATER expression .)
    LESS            reduce using rule 42 (expression -> expression GREATER expression .)
    NOT_EQ          reduce using rule 42 (expression -> expression GREATER expression .)
    GREATER_EQ      reduce using rule 42 (expression -> expression GREATER expression .)
    LESS_EQ         reduce using rule 42 (expression -> expression GREATER expression .)
    OR              reduce using rule 42 (expression -> expression GREATER expression .)
    AND             reduce using rule 42 (expression -> expression GREATER expression .)
    RPAREN          reduce using rule 42 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 42 (expression -> expression GREATER expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 42 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression GREATER expression .) ]
  ! MULTIPLY        [ reduce using rule 42 (expression -> expression GREATER expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression GREATER expression .) ]
  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 108

    (43) expression -> expression LESS expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 43 (expression -> expression LESS expression .)
    EQ              reduce using rule 43 (expression -> expression LESS expression .)
    GREATER         reduce using rule 43 (expression -> expression LESS expression .)
    LESS            reduce using rule 43 (expression -> expression LESS expression .)
    NOT_EQ          reduce using rule 43 (expression -> expression LESS expression .)
    GREATER_EQ      reduce using rule 43 (expression -> expression LESS expression .)
    LESS_EQ         reduce using rule 43 (expression -> expression LESS expression .)
    OR              reduce using rule 43 (expression -> expression LESS expression .)
    AND             reduce using rule 43 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 43 (expression -> expression LESS expression .)
    COMMA           reduce using rule 43 (expression -> expression LESS expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 43 (expression -> expression LESS expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression LESS expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression LESS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression LESS expression .) ]
  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 109

    (44) expression -> expression NOT_EQ expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 44 (expression -> expression NOT_EQ expression .)
    EQ              reduce using rule 44 (expression -> expression NOT_EQ expression .)
    GREATER         reduce using rule 44 (expression -> expression NOT_EQ expression .)
    LESS            reduce using rule 44 (expression -> expression NOT_EQ expression .)
    NOT_EQ          reduce using rule 44 (expression -> expression NOT_EQ expression .)
    GREATER_EQ      reduce using rule 44 (expression -> expression NOT_EQ expression .)
    LESS_EQ         reduce using rule 44 (expression -> expression NOT_EQ expression .)
    OR              reduce using rule 44 (expression -> expression NOT_EQ expression .)
    AND             reduce using rule 44 (expression -> expression NOT_EQ expression .)
    RPAREN          reduce using rule 44 (expression -> expression NOT_EQ expression .)
    COMMA           reduce using rule 44 (expression -> expression NOT_EQ expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 44 (expression -> expression NOT_EQ expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression NOT_EQ expression .) ]
  ! MULTIPLY        [ reduce using rule 44 (expression -> expression NOT_EQ expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression NOT_EQ expression .) ]
  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 110

    (45) expression -> expression GREATER_EQ expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    EQ              reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    GREATER         reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    LESS            reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    NOT_EQ          reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    GREATER_EQ      reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    LESS_EQ         reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    OR              reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    AND             reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    RPAREN          reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    COMMA           reduce using rule 45 (expression -> expression GREATER_EQ expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 45 (expression -> expression GREATER_EQ expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression GREATER_EQ expression .) ]
  ! MULTIPLY        [ reduce using rule 45 (expression -> expression GREATER_EQ expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression GREATER_EQ expression .) ]
  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 111

    (46) expression -> expression LESS_EQ expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 46 (expression -> expression LESS_EQ expression .)
    EQ              reduce using rule 46 (expression -> expression LESS_EQ expression .)
    GREATER         reduce using rule 46 (expression -> expression LESS_EQ expression .)
    LESS            reduce using rule 46 (expression -> expression LESS_EQ expression .)
    NOT_EQ          reduce using rule 46 (expression -> expression LESS_EQ expression .)
    GREATER_EQ      reduce using rule 46 (expression -> expression LESS_EQ expression .)
    LESS_EQ         reduce using rule 46 (expression -> expression LESS_EQ expression .)
    OR              reduce using rule 46 (expression -> expression LESS_EQ expression .)
    AND             reduce using rule 46 (expression -> expression LESS_EQ expression .)
    RPAREN          reduce using rule 46 (expression -> expression LESS_EQ expression .)
    COMMA           reduce using rule 46 (expression -> expression LESS_EQ expression .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! PLUS            [ reduce using rule 46 (expression -> expression LESS_EQ expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression LESS_EQ expression .) ]
  ! MULTIPLY        [ reduce using rule 46 (expression -> expression LESS_EQ expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression LESS_EQ expression .) ]
  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 112

    (47) expression -> expression PLUS expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 47 (expression -> expression PLUS expression .)
    EQ              reduce using rule 47 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 47 (expression -> expression PLUS expression .)
    LESS            reduce using rule 47 (expression -> expression PLUS expression .)
    NOT_EQ          reduce using rule 47 (expression -> expression PLUS expression .)
    GREATER_EQ      reduce using rule 47 (expression -> expression PLUS expression .)
    LESS_EQ         reduce using rule 47 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 47 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 47 (expression -> expression PLUS expression .)
    OR              reduce using rule 47 (expression -> expression PLUS expression .)
    AND             reduce using rule 47 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 47 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 47 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! MULTIPLY        [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression PLUS expression .) ]
  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 113

    (48) expression -> expression MINUS expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 48 (expression -> expression MINUS expression .)
    EQ              reduce using rule 48 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 48 (expression -> expression MINUS expression .)
    LESS            reduce using rule 48 (expression -> expression MINUS expression .)
    NOT_EQ          reduce using rule 48 (expression -> expression MINUS expression .)
    GREATER_EQ      reduce using rule 48 (expression -> expression MINUS expression .)
    LESS_EQ         reduce using rule 48 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 48 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 48 (expression -> expression MINUS expression .)
    OR              reduce using rule 48 (expression -> expression MINUS expression .)
    AND             reduce using rule 48 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 48 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 48 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! MULTIPLY        [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression MINUS expression .) ]
  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 114

    (49) expression -> expression MULTIPLY expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 49 (expression -> expression MULTIPLY expression .)
    EQ              reduce using rule 49 (expression -> expression MULTIPLY expression .)
    GREATER         reduce using rule 49 (expression -> expression MULTIPLY expression .)
    LESS            reduce using rule 49 (expression -> expression MULTIPLY expression .)
    NOT_EQ          reduce using rule 49 (expression -> expression MULTIPLY expression .)
    GREATER_EQ      reduce using rule 49 (expression -> expression MULTIPLY expression .)
    LESS_EQ         reduce using rule 49 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 49 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 49 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 49 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 49 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 49 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 49 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 49 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 49 (expression -> expression MULTIPLY expression .)

  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 115

    (50) expression -> expression DIVIDE expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 50 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 50 (expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 50 (expression -> expression DIVIDE expression .)
    LESS            reduce using rule 50 (expression -> expression DIVIDE expression .)
    NOT_EQ          reduce using rule 50 (expression -> expression DIVIDE expression .)
    GREATER_EQ      reduce using rule 50 (expression -> expression DIVIDE expression .)
    LESS_EQ         reduce using rule 50 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 50 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 50 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 50 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 50 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 50 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 50 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 50 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 50 (expression -> expression DIVIDE expression .)

  ! EQ              [ shift and go to state 75 ]
  ! GREATER         [ shift and go to state 76 ]
  ! LESS            [ shift and go to state 77 ]
  ! NOT_EQ          [ shift and go to state 78 ]
  ! GREATER_EQ      [ shift and go to state 79 ]
  ! LESS_EQ         [ shift and go to state 80 ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! MULTIPLY        [ shift and go to state 83 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 116

    (52) expression -> expression OR expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 52 (expression -> expression OR expression .)
    OR              reduce using rule 52 (expression -> expression OR expression .)
    RPAREN          reduce using rule 52 (expression -> expression OR expression .)
    COMMA           reduce using rule 52 (expression -> expression OR expression .)
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    AND             shift and go to state 86

  ! EQ              [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! NOT_EQ          [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! GREATER_EQ      [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! LESS_EQ         [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 85 ]


state 117

    (53) expression -> expression AND expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 53 (expression -> expression AND expression .)
    OR              reduce using rule 53 (expression -> expression AND expression .)
    AND             reduce using rule 53 (expression -> expression AND expression .)
    RPAREN          reduce using rule 53 (expression -> expression AND expression .)
    COMMA           reduce using rule 53 (expression -> expression AND expression .)
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84

  ! EQ              [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! NOT_EQ          [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! GREATER_EQ      [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! LESS_EQ         [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression AND expression .) ]
  ! OR              [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 118

    (32) statement -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    RPAREN          shift and go to state 131
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 119

    (34) statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 34 (statement -> RETURN expression SEMI .)
    VAR             reduce using rule 34 (statement -> RETURN expression SEMI .)
    BVAR            reduce using rule 34 (statement -> RETURN expression SEMI .)
    IF              reduce using rule 34 (statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 34 (statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 34 (statement -> RETURN expression SEMI .)
    NOT             reduce using rule 34 (statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 34 (statement -> RETURN expression SEMI .)
    INT             reduce using rule 34 (statement -> RETURN expression SEMI .)
    STR             reduce using rule 34 (statement -> RETURN expression SEMI .)
    BOOL            reduce using rule 34 (statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 34 (statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 34 (statement -> RETURN expression SEMI .)
    TRUE            reduce using rule 34 (statement -> RETURN expression SEMI .)
    FALSE           reduce using rule 34 (statement -> RETURN expression SEMI .)
    STRING          reduce using rule 34 (statement -> RETURN expression SEMI .)
    CLOSURE         reduce using rule 34 (statement -> RETURN expression SEMI .)
    AT              reduce using rule 34 (statement -> RETURN expression SEMI .)
    NIL             reduce using rule 34 (statement -> RETURN expression SEMI .)
    LAMBDA          reduce using rule 34 (statement -> RETURN expression SEMI .)
    NAME            reduce using rule 34 (statement -> RETURN expression SEMI .)


state 120

    (24) assign -> qualified_name ASSIGN expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    SEMI            reduce using rule 24 (assign -> qualified_name ASSIGN expression .)
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 121

    (61) expression -> qualified_name LPAREN args . RPAREN
    (64) args -> args . COMMA expression

    RPAREN          shift and go to state 132
    COMMA           shift and go to state 133


state 122

    (62) expression -> qualified_name LPAREN RPAREN .

    SEMI            reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    EQ              reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    GREATER         reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    LESS            reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    NOT_EQ          reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    GREATER_EQ      reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    LESS_EQ         reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    PLUS            reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    MINUS           reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    MULTIPLY        reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    OR              reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    AND             reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    RPAREN          reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)
    COMMA           reduce using rule 62 (expression -> qualified_name LPAREN RPAREN .)


state 123

    (65) args -> expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    RPAREN          reduce using rule 65 (args -> expression .)
    COMMA           reduce using rule 65 (args -> expression .)
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 124

    (27) qualified_name -> qualified_name DOT NAME .

    ASSIGN          reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    LPAREN          reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    DOT             reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    SEMI            reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    EQ              reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    GREATER         reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    LESS            reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    NOT_EQ          reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    GREATER_EQ      reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    LESS_EQ         reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    PLUS            reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    MINUS           reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    MULTIPLY        reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    DIVIDE          reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    OR              reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    AND             reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    RPAREN          reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)
    COMMA           reduce using rule 27 (qualified_name -> qualified_name DOT NAME .)


state 125

    (38) expression -> INT LPAREN expression . RPAREN
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    RPAREN          shift and go to state 134
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 126

    (39) expression -> STR LPAREN expression . RPAREN
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    RPAREN          shift and go to state 135
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 127

    (40) expression -> BOOL LPAREN expression . RPAREN
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    RPAREN          shift and go to state 136
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 128

    (66) expression -> LAMBDA LPAREN formal_args . RPAREN LBRACE statements RBRACE
    (17) formal_args -> formal_args . COMMA formal_arg

    RPAREN          shift and go to state 137
    COMMA           shift and go to state 30


state 129

    (67) expression -> LAMBDA LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 138


state 130

    (30) statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE
    (31) statement -> IF LPAREN expression RPAREN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LBRACE          shift and go to state 139


state 131

    (32) statement -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 140


state 132

    (61) expression -> qualified_name LPAREN args RPAREN .

    SEMI            reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    EQ              reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    GREATER         reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    LESS            reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    NOT_EQ          reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    GREATER_EQ      reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    LESS_EQ         reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    PLUS            reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    MINUS           reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    MULTIPLY        reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    DIVIDE          reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    OR              reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    AND             reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    RPAREN          reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)
    COMMA           reduce using rule 61 (expression -> qualified_name LPAREN args RPAREN .)


state 133

    (64) args -> args COMMA . expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 141
    qualified_name                 shift and go to state 66

state 134

    (38) expression -> INT LPAREN expression RPAREN .

    SEMI            reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    EQ              reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    GREATER         reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    LESS            reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    PLUS            reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    MINUS           reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    OR              reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    AND             reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    RPAREN          reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)
    COMMA           reduce using rule 38 (expression -> INT LPAREN expression RPAREN .)


state 135

    (39) expression -> STR LPAREN expression RPAREN .

    SEMI            reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    EQ              reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    GREATER         reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    LESS            reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    PLUS            reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    MINUS           reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    OR              reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    AND             reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    RPAREN          reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)
    COMMA           reduce using rule 39 (expression -> STR LPAREN expression RPAREN .)


state 136

    (40) expression -> BOOL LPAREN expression RPAREN .

    SEMI            reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    EQ              reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    GREATER         reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    LESS            reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    PLUS            reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    MINUS           reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    OR              reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    AND             reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    RPAREN          reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)
    COMMA           reduce using rule 40 (expression -> BOOL LPAREN expression RPAREN .)


state 137

    (66) expression -> LAMBDA LPAREN formal_args RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 142


state 138

    (67) expression -> LAMBDA LPAREN RPAREN LBRACE . statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    statements                     shift and go to state 143
    statement                      shift and go to state 40
    assign                         shift and go to state 41
    expression                     shift and go to state 45
    qualified_name                 shift and go to state 48

state 139

    (30) statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE
    (31) statement -> IF LPAREN expression RPAREN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 45
    statements                     shift and go to state 144
    statement                      shift and go to state 40
    assign                         shift and go to state 41
    qualified_name                 shift and go to state 48

state 140

    (32) statement -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 45
    statements                     shift and go to state 145
    statement                      shift and go to state 40
    assign                         shift and go to state 41
    qualified_name                 shift and go to state 48

state 141

    (64) args -> args COMMA expression .
    (41) expression -> expression . EQ expression
    (42) expression -> expression . GREATER expression
    (43) expression -> expression . LESS expression
    (44) expression -> expression . NOT_EQ expression
    (45) expression -> expression . GREATER_EQ expression
    (46) expression -> expression . LESS_EQ expression
    (47) expression -> expression . PLUS expression
    (48) expression -> expression . MINUS expression
    (49) expression -> expression . MULTIPLY expression
    (50) expression -> expression . DIVIDE expression
    (52) expression -> expression . OR expression
    (53) expression -> expression . AND expression

    RPAREN          reduce using rule 64 (args -> args COMMA expression .)
    COMMA           reduce using rule 64 (args -> args COMMA expression .)
    EQ              shift and go to state 75
    GREATER         shift and go to state 76
    LESS            shift and go to state 77
    NOT_EQ          shift and go to state 78
    GREATER_EQ      shift and go to state 79
    LESS_EQ         shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    MULTIPLY        shift and go to state 83
    DIVIDE          shift and go to state 84
    OR              shift and go to state 85
    AND             shift and go to state 86


state 142

    (66) expression -> LAMBDA LPAREN formal_args RPAREN LBRACE . statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    statements                     shift and go to state 146
    statement                      shift and go to state 40
    assign                         shift and go to state 41
    expression                     shift and go to state 45
    qualified_name                 shift and go to state 48

state 143

    (67) expression -> LAMBDA LPAREN RPAREN LBRACE statements . RBRACE
    (21) statements -> statements . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    RBRACE          shift and go to state 147
    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    statement                      shift and go to state 68
    assign                         shift and go to state 41
    expression                     shift and go to state 45
    qualified_name                 shift and go to state 48

state 144

    (30) statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE
    (31) statement -> IF LPAREN expression RPAREN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE
    (21) statements -> statements . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    RBRACE          shift and go to state 148
    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 45
    statement                      shift and go to state 68
    assign                         shift and go to state 41
    qualified_name                 shift and go to state 48

state 145

    (32) statement -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE
    (21) statements -> statements . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    RBRACE          shift and go to state 149
    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 45
    statement                      shift and go to state 68
    assign                         shift and go to state 41
    qualified_name                 shift and go to state 48

state 146

    (66) expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements . RBRACE
    (21) statements -> statements . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    RBRACE          shift and go to state 150
    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    statement                      shift and go to state 68
    assign                         shift and go to state 41
    expression                     shift and go to state 45
    qualified_name                 shift and go to state 48

state 147

    (67) expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .

    SEMI            reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    EQ              reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    GREATER         reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    LESS            reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    NOT_EQ          reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    GREATER_EQ      reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    LESS_EQ         reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    PLUS            reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    MULTIPLY        reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    OR              reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    AND             reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)
    COMMA           reduce using rule 67 (expression -> LAMBDA LPAREN RPAREN LBRACE statements RBRACE .)


state 148

    (30) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .
    (31) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE

    RBRACE          reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    BVAR            reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    NOT             reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    BOOL            reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    NUMBER          reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    TRUE            reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    FALSE           reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    STRING          reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    CLOSURE         reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    AT              reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    NIL             reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    LAMBDA          reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    NAME            reduce using rule 30 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE .)
    ELSE            shift and go to state 151


state 149

    (32) statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    RBRACE          reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    BVAR            reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RETURN          reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    NOT             reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INT             reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    STR             reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    BOOL            reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    LPAREN          reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    NUMBER          reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    TRUE            reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FALSE           reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    STRING          reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CLOSURE         reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    AT              reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    NIL             reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    LAMBDA          reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    NAME            reduce using rule 32 (statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 150

    (66) expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .

    SEMI            reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    EQ              reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    GREATER         reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    LESS            reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    NOT_EQ          reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    GREATER_EQ      reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    LESS_EQ         reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    PLUS            reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    MINUS           reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    MULTIPLY        reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    DIVIDE          reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    OR              reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    AND             reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    RPAREN          reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)
    COMMA           reduce using rule 66 (expression -> LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE .)


state 151

    (31) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 152


state 152

    (31) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE
    (21) statements -> . statements statement
    (22) statements -> . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 45
    statements                     shift and go to state 153
    statement                      shift and go to state 40
    assign                         shift and go to state 41
    qualified_name                 shift and go to state 48

state 153

    (31) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE
    (21) statements -> statements . statement
    (23) statement -> . assign SEMI
    (25) statement -> . VAR qualified_name_no_dot SEMI
    (26) statement -> . BVAR qualified_name_no_dot SEMI
    (30) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE
    (31) statement -> . IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
    (32) statement -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (33) statement -> . expression SEMI
    (34) statement -> . RETURN expression SEMI
    (35) statement -> . RETURN SEMI
    (24) assign -> . qualified_name ASSIGN expression
    (36) expression -> . NOT expression
    (37) expression -> . MINUS expression
    (38) expression -> . INT LPAREN expression RPAREN
    (39) expression -> . STR LPAREN expression RPAREN
    (40) expression -> . BOOL LPAREN expression RPAREN
    (41) expression -> . expression EQ expression
    (42) expression -> . expression GREATER expression
    (43) expression -> . expression LESS expression
    (44) expression -> . expression NOT_EQ expression
    (45) expression -> . expression GREATER_EQ expression
    (46) expression -> . expression LESS_EQ expression
    (47) expression -> . expression PLUS expression
    (48) expression -> . expression MINUS expression
    (49) expression -> . expression MULTIPLY expression
    (50) expression -> . expression DIVIDE expression
    (51) expression -> . LPAREN expression RPAREN
    (52) expression -> . expression OR expression
    (53) expression -> . expression AND expression
    (54) expression -> . NUMBER
    (55) expression -> . TRUE
    (56) expression -> . FALSE
    (57) expression -> . STRING
    (58) expression -> . CLOSURE NAME
    (59) expression -> . AT
    (60) expression -> . NIL
    (61) expression -> . qualified_name LPAREN args RPAREN
    (62) expression -> . qualified_name LPAREN RPAREN
    (63) expression -> . qualified_name
    (66) expression -> . LAMBDA LPAREN formal_args RPAREN LBRACE statements RBRACE
    (67) expression -> . LAMBDA LPAREN RPAREN LBRACE statements RBRACE
    (27) qualified_name -> . qualified_name DOT NAME
    (28) qualified_name -> . NAME

    RBRACE          shift and go to state 154
    VAR             shift and go to state 42
    BVAR            shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 46
    RETURN          shift and go to state 47
    NOT             shift and go to state 49
    MINUS           shift and go to state 50
    INT             shift and go to state 51
    STR             shift and go to state 52
    BOOL            shift and go to state 53
    LPAREN          shift and go to state 38
    NUMBER          shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 57
    CLOSURE         shift and go to state 58
    AT              shift and go to state 59
    NIL             shift and go to state 60
    LAMBDA          shift and go to state 61
    NAME            shift and go to state 37

    expression                     shift and go to state 45
    statement                      shift and go to state 68
    assign                         shift and go to state 41
    qualified_name                 shift and go to state 48

state 154

    (31) statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .

    RBRACE          reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    VAR             reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    BVAR            reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    WHILE           reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    RETURN          reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    NOT             reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    MINUS           reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    INT             reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    STR             reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    BOOL            reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    LPAREN          reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    NUMBER          reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    TRUE            reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    FALSE           reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    STRING          reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    CLOSURE         reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    AT              reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    NIL             reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    LAMBDA          reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)
    NAME            reduce using rule 31 (statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .)

